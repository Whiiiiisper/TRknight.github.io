<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言-链接</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E9%93%BE%E6%8E%A5/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="链接器概念"><a href="#链接器概念" class="headerlink" title="链接器概念"></a>链接器概念</h1><p>​    编译器和链接器的一项重要任务就是将助记符替换成地址。修改程序后，需要重新计算每个子程序或者跳转的目标地址，这个过程叫做<strong>重定位（Relocation）</strong></p><p>​    使用机器语言编程时每次修改代码后需要人工重新计算目标地址，直到汇编语言出现。汇编语言使用接近人类的各种符号和标记来帮助记忆，比如用jmp表示跳转指令，用func表示一个子程序（C语言中的函数就是一个子程序）的起始地址，这种符号的方法使得人们从具体的机器指令和二进制地址中解放出来。</p><blockquote><p>符号（Symbol）这个概念随着汇编语言的普及被广泛接受，它用来表示一个地址，这个地址可能是一段子程序（后来发展为函数）的起始地址，也可以是一个变量的地址。</p></blockquote><p>​    在程序被分隔成多个模块后，需要解决的一个重要问题是如何将这些模块组合成一个单一的可执行程序。在C语言中，模块之间的依赖关系主要有两种：一种是模块间的函数调用，另外一种是模块间的变量访问。</p><blockquote><p>在C语言中，一个模块可以认为是一个源文件（.c 文件）</p></blockquote><p>​    函数调用需要知道函数的首地址，变量访问需要知道变量的地址，所以这两种方式可以归结为一种，那就是模块间的符号引用。</p><p>​    这种通过符号将多个模块拼接为一个独立的程序的过程就叫做<strong>链接（Linking）</strong>。从原理上来讲，链接器的作用就是找到符号（函数、全局变量，忽略局部变量）的地址，或者把指令中使用到的地址加以修正。这个过程称为<strong>符号决议（Symbol Resolution）</strong>或者<strong>重定位（Relocation）</strong></p><blockquote><p>每个需要被修正的地方叫做一个重定位入口（Relocation Entry）</p></blockquote><h1 id="链接步骤"><a href="#链接步骤" class="headerlink" title="链接步骤"></a>链接步骤</h1><h2 id="1-符号决议（Symbol-Resolution）"><a href="#1-符号决议（Symbol-Resolution）" class="headerlink" title="1.符号决议（Symbol Resolution）"></a>1.符号决议（Symbol Resolution）</h2><p>当要进行链接时，链接器首先扫描所有的目标文件，获得各个段的长度、属性、位置等信息，并将目标文件中的所有（符号表中的）符号收集起来，统一放到一个全局符号表。</p><p>在这一步中，链接器会将目标文件中的各个段合并到可执行文件，并计算出合并后的各个段的长度、位置、虚拟地址等。</p><p>在目标文件的符号表中，保存了各个符号在段内的偏移，生成可执行文件后，原来各个段（Section）起始位置的虚拟地址就确定了下来，这样，使用起始地址加上偏移量就能够得到符号的地址（在进程中的虚拟地址）。</p><p>这种计算符号地址的过程被称为<strong>符号决议（Symbol Resolution）</strong>。</p><h2 id="2-重定位"><a href="#2-重定位" class="headerlink" title="2. 重定位"></a>2. 重定位</h2><p>重定位表.rel.text和.rel.data中保存了需要重定位的全局符号以及重定位入口，完成了符号决议，链接器会根据重定位表调整代码中的地址，使它指向正确的内存位置。（修改.text段和.data段中对每个符号的引用(地址)）</p><p>至此，可执行文件就生成了，链接器完成了它的使命。</p><p><img src="/C%E8%AF%AD%E8%A8%80-%E9%93%BE%E6%8E%A5/image-20230411214618935.png"></p><h1 id="强符号和弱符号"><a href="#强符号和弱符号" class="headerlink" title="强符号和弱符号"></a>强符号和弱符号</h1><p>在C语言中，编译器默认函数和初始化了的全局变量为<strong>强符号（Strong Symbol）</strong>，未初始化的全局变量为<strong>弱符号（Weak Symbol）</strong></p><blockquote><p>注意，不包括函数内的局部变量，和加static修饰的本地符号</p></blockquote><ol><li><p>不允许强符号被多次定义，也即不同的目标文件中不能有同名的强符号；如果有多个强符号，那么链接器会报符号<strong>重复定义（Multiple Definition）</strong>错误。</p></li><li><p>如果一个符号在某个目标文件中是强符号，在其他文件中是弱符号，那么选择强符号。</p></li><li><p>如果一个符号在所有的目标文件中都是弱符号，那么选择其中占用空间最大的一个。</p></li></ol><h1 id="强引用和弱引用"><a href="#强引用和弱引用" class="headerlink" title="强引用和弱引用"></a>强引用和弱引用</h1><blockquote><p>在变量声明或函数声明的前面加上<code>__attribute__((weak))</code>就会使符号变为弱引用</p></blockquote><h2 id="强引用："><a href="#强引用：" class="headerlink" title="强引用："></a>强引用：</h2><p>在所有目标文件被链接成可执行文件时，它们的地址都要被找到，如果没有符号定义，链接器就会报符号未定义错误</p><h2 id="弱引用："><a href="#弱引用：" class="headerlink" title="弱引用："></a>弱引用：</h2><p>如果符号有定义，就使用它对应的地址，如果没有定义，也不报错</p><p>对于未定义的弱引用，链接器不认为它是一个错误，一般默认其为 0（地址为 0），或者是一个特殊的值，以便程序代码能够识别。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-可执行文件组织形式</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E5%92%8C%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87%E5%BD%A2%E5%BC%8F/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E5%92%8C%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87%E5%BD%A2%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>​    主流的可执行文件格式主要是 Windows 下的 PE（Portable Executable）和 Linux 下的 ELF（Executable Linkable Format），它们都是 COFF（Common File Format）格式的变种，COFF 是 Unix V3首先提出的规范。其他不太常见的可执行文件格式还有 Intel/Microsoft 的 OMF（Object Module Format）、Unix a.out、MS-DOS .COM 等。</p><p>​    从广义上讲，目标文件与可执行文件的存储格式几乎是一样的，动态链接库（DLL，Dynamic Linking Library）（Windows 下的.dll和 Linux 下的.so）和静态链接库（Static Linking Library）（Windows 下的.lib和 Linux 下的.a）也是按照可执行文件的格式存储的。</p><p>​    静态链接库稍有不同，它是把多个目标文件捆绑在一起形成一个文件，再加上一些索引，可以简单地把它理解为一个包含了很多目标文件的包。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">objdump -d demo.o <br>可使用此指令查看目标文件，-d表示把所有包含指令的段反汇编<br><br>objdump -s -d demo.o<br>-s表示所有段以十六进制显示<br><br>objdump -h demo.o <br>可使用此指令查看文件组织形式<br><br>objdump -r demo.o <br>可使用此指令查看需要重定位的符号<br></code></pre></td></tr></table></figure><h1 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h1><p>在 Linux 的 ELF 标准中，主要包含以下四类文件：</p><table><thead><tr><th><strong>文件类型</strong></th><th><strong>说明</strong></th><th><strong>实例</strong></th></tr></thead><tbody><tr><td>可重定位文件  （Relocatable  File）</td><td>这类文件包含了代码和数据，可以被用来链接成为可执行文件或动态链接库。静态链接库其实也是可重定位文件。</td><td>Linux  下的 .o 和 .a，Windows 下的 .obj 和 .lib。</td></tr><tr><td>可执行文件  （Executable  File）</td><td>这类文件包含了可以直接执行的程序。</td><td>Windows  下的 .exe，Linux 下的可执行文件没有固定的后缀，一般不写。</td></tr><tr><td>共享目标文件  （Shared  Object File）</td><td>这种文件包含了代码和数据，可以在以下两种情况下使用：一种是链接器可以使用这种文件跟其他的可重定位文件和共享目标文件链接，产生新的目标文件；第二种是动态连接器可以将几个共享目标文件与可执行文件结合，作为进程的一部分来运行。</td><td>Linux  下的 .so，Windows 下的 .dll。</td></tr><tr><td>核心转储文件  （Core  Dump File）</td><td>当进程意外终止时，系统可以将该进程的地址空间的内容以及其他信息保存到核心转储文件。</td><td>Linux  下的 core dump。</td></tr></tbody></table><h1 id="可执行文件组织形式"><a href="#可执行文件组织形式" class="headerlink" title="可执行文件组织形式"></a>可执行文件组织形式</h1><p><img src="/C%E8%AF%AD%E8%A8%80-%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E5%92%8C%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87%E5%BD%A2%E5%BC%8F/image-20230411213602877.png"></p><blockquote><p>text段在内存中被映射为只读，但date段与bss段是可写的</p><p>linux中的elf文件都是从虚拟地址0x08048000开始分配的</p></blockquote><ul><li>text段：代码段，就是放程序代码的，编译时确定，只读</li><li>date段：存放在编译阶段（而非运行时）就能确定的数据，可读可写。也就是通常所说的静态存储区，赋了初值的全局变量和赋初值的静态变量存放在这个区域，常量也存在这个区域</li><li>bss段：已经定义但没赋初值的全局变量和静态变量存放在这个区域。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-编译过程</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>从源代码生成可执行文件可以分为四个步骤，分别是<strong>预处理（Preprocessing）</strong>、<strong>编译（Compilation）</strong>、<strong>汇编（Assembly）</strong>和<strong>链接（Linking）</strong></p><p><img src="/C%E8%AF%AD%E8%A8%80-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/image-20230411212028697.png"></p><blockquote><p>直接生成可执行文件（带调试信息）：</p><p>$gcc -g demo.c -o demo </p><p>不带调试信息 ：</p><p>$gcc demo.c -o demo </p></blockquote><h1 id="预处理（Preprocessing）"><a href="#预处理（Preprocessing）" class="headerlink" title="预处理（Preprocessing）"></a>预处理（Preprocessing）</h1><blockquote><p>预编译指令（directive）</p></blockquote><p>预处理过程主要是处理那些源文件和头文件中以#开头的命令，比如 #include、#define、#ifdef 等。预处理的规则一般如下：</p><ul><li>将所有的#define删除，并展开所有的宏定义。</li><li>处理所有条件编译命令，比如 #if、#ifdef、#elif、#else、#endif 等。</li><li>处理#include命令，将被包含文件的内容插入到该命令所在的位置，这与复制粘贴的效果一样。注意，这个过程是递归进行的，也就是说被包含的文件可能还会包含其他的文件。</li><li>删除所有的注释//和/*     … */。</li><li>添加行号和文件名标识，便于在调试和出错时给出具体的代码位置。</li><li>保留所有的#pragma命令，因为编译器需要使用它们。</li></ul><p>预处理的结果是生成.i文件。.i文件也是包含C语言代码的源文件，只不过所有的宏已经被展开，所有包含的文件已经被插入到当前文件中。当你无法判断宏定义是否正确，或者文件包含是否有效时，可以查看.i文件来确定问题。</p><blockquote><p> 在 GCC 中，可以通过下面的命令生成.i文件：   </p><p>$gcc -E demo.c -o demo.i                // -E表示只进行预编译。</p></blockquote><p>在 Visual Studio 中，在当前工程的属性面板中将“预处理到文件”设置为“是”，如下图所示：</p><p><img src="/C%E8%AF%AD%E8%A8%80-%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/clip_image001.png"></p><h1 id="编译（Compilation）"><a href="#编译（Compilation）" class="headerlink" title="编译（Compilation）"></a>编译（Compilation）</h1><p>编译就是把预处理完的文件进行一些列的词法分析、语法分析、语义分析以及优化后生成相应的汇编代码文件。</p><blockquote><p> 在 GCC 中，可以使用下面的命令生成.s文件：</p><p>$gcc -S demo.i -o demo.s</p><p>或者</p><p>$gcc -S demo.c -o demo.s</p></blockquote><p>在 Visual Studio 中，不用进行任何设置就可以在工程目录下看到 demo.asm 文件。</p><h1 id="汇编（Assembly）"><a href="#汇编（Assembly）" class="headerlink" title="汇编（Assembly）"></a>汇编（Assembly）</h1><p>汇编的过程就是将汇编代码转换成可以执行的机器指令。大部分汇编语句对应一条机器指令，有的汇编语句对应多条机器指令。</p><p>汇编的结果是产生目标文件，在 GCC 下的后缀为.o，在 Visual Studio 下的后缀为.obj</p><p>汇编过程简单，仅是查表翻译，通常作为编译过程一部分。</p><blockquote><p> $gcc -c demo.i -o demo.o</p></blockquote><h1 id="链接（Linking）"><a href="#链接（Linking）" class="headerlink" title="链接（Linking）"></a>链接（Linking）</h1><p>目标文件已经是二进制文件，与可执行文件的组织形式类似，只是有些函数和全局变量的地址还未找到，程序不能执行。链接的作用就是找到这些目标地址，将所有的目标文件组织成一个可以执行的二进制文件。</p><blockquote><p>将多个目标文件链接：</p><p>$gcc demo1.o demo2.o demo2.o</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-函数栈帧</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="栈帧概念"><a href="#栈帧概念" class="headerlink" title="栈帧概念"></a>栈帧概念</h1><p>当发生函数调用时，会将函数运行需要的信息全部压入栈中，这常常被称为栈帧（Stack Frame）或 活动记录（Activate Record），一般包括一下几个方面内容：</p><ol><li><p>函数的返回地址，也就是函数执行完成后从哪里开始继续执行后面的代码。</p></li><li><p>参数和局部变量。<em>（有些编译器，或者编译器在开启优化选项的情况下，会通过寄存器来传递参数，而不是将参数压入栈中）</em></p></li><li><p>编译器自动生成的临时数据。</p><p><em>a. 当函数返回值的长度较大（比如占用40个字节）时，会先将返回值压入栈中，然后再交给函数调用者。</em></p></li><li><p><em>b. 当返回值的长度较小（char、int、long      等）时，不会被压入栈中，而是先将返回值放入寄存器，再传递给函数调用者。</em></p></li><li><p>一些需要保存的寄存器，为了在函数退出时能够恢复到函数调用之前的场景，继续执行上层函数。</p></li></ol><h1 id="调用惯例"><a href="#调用惯例" class="headerlink" title="调用惯例"></a>调用惯例</h1><ol><li><p>函数参数的传递方式，是通过栈传递还是通过寄存器传递</p></li><li><p>函数参数的传递顺序，是从左到右入栈还是从右到左入栈。</p></li><li><p>参数弹出方式。函数调用结束后需要将压入栈中的参数全部弹出，以使得栈在函数调用前后保持一致。这个弹出的工作可以由调用方来完成，也可以由被调用方来完成。</p></li><li><p>函数名修饰方式。函数名在编译时会被修改，调用惯例可以决定如何修改函数名</p></li></ol><div align=center>     <img src="image-20230411210854946.png" style="zoom:70%;"></img> </div><blockquote><p>在函数声明处是为调用方指定调用惯例，</p><p>而在函数定义处是为被调用方（也就是函数本身）指定调用惯例。</p></blockquote><table><thead><tr><th><strong>调用惯例</strong></th><th><strong>参数传递方式</strong></th><th><strong>参数出栈方式</strong></th><th><strong>名字修饰</strong></th></tr></thead><tbody><tr><td>cdecl</td><td>按照从右到左的顺序入栈</td><td>调用方</td><td>下划线+函数名，  如函数  max() 的修饰名为 _max</td></tr><tr><td>stdcall</td><td>按照从右到左的顺序入栈</td><td>函数本身  （被调用方）</td><td>下划线+函数名+@+参数的字节数，  如函数 int  max(int m, int n) 的修饰名为 <em>max</em>@8</td></tr><tr><td>fastcall</td><td>将部分参数放入寄存器，  剩下的参数按照从右到左的顺序入栈</td><td>函数本身  （被调用方）</td><td>@+函数名+@+参数的字节数</td></tr><tr><td>pascal</td><td>按照从左到右的顺序入栈</td><td>函数本身  （被调用方）</td><td>较复杂</td></tr></tbody></table><h1 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-type">int</span> p =<span class="hljs-number">12</span>, q = <span class="hljs-number">345</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>func(<span class="hljs-number">90</span>, <span class="hljs-number">26</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>函数使用默认的调用惯例 cdecl，即参数从右到左入栈，由调用方负责将参数出栈</p></blockquote><p>函数进栈出栈过程：</p><p><img src="/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7/image-20230411211240628.png"></p><ul><li><p>第一个变量和 old ebp 之间有4个字节的空白，变量之间也有若干字节的空白。</p><blockquote><p>因为Debug模式下方便加入调试信息，Release模式下会优化</p></blockquote></li><li><p>为局部变量分配内存时，仅仅是将 esp 的值减去一个整数，预留出足够的空白内存。因此<strong>未初始化的局部变量值是垃圾值</strong></p></li></ul><h1 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h1><div align=center>     <img src="image-20230411211416137.png" style="zoom:80%;"></img> </div><p><img src="/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7/image-20230411211718207.png"></p><p><img src="/C%E8%AF%AD%E8%A8%80-%E5%87%BD%E6%95%B0%E6%A0%88%E5%B8%A7/image-20230411211729873.png"></p><p>从133~139行我们可以看到main函数栈帧的形成过程（入栈操作）：</p><p>1）  push %rbp 将上一级函数栈帧的栈底指针压栈</p><p>2）  mov %rsp, %rbp 将BP指针指向SP，因为上一级函数的栈顶指针是下一级函数的栈底指针，证明栈帧是依次向下增长的</p><p>3）  sub $0x10, %rsp SP栈顶指针向下位移16个字节，即创建main函数栈帧。这个地方为什么是16个字节呢？是因为上一级函数栈底指针和当前函数返回时下一条指令地址各占4个字节，m和n两个整形变量各占4个字节，加起来就是16个字节。</p><p>4）  movl $0x8, -0x4(%rbp) 将变量m压栈</p><p>5）  movl $0x6, -0x8(%rbp) 将变量n压栈</p><p>6）  mov -0x8(%rbp), %edx   将m变量值加载到edx寄存器</p><p>mov -0x4(%rbp), %eax   将n变量值加载到eax寄存器</p><p>mov %edx, %esi</p><p>mov %eax, %edi</p><p>7）callq 4004c4 <func> 调用callq指令跳转到func函数段，同时压栈EIP+4，即返回func函数时下一条可执行指令的地址</p><blockquote><p>从func函数的反汇编代码可以看到，0x4004c4地址就是func函数开始处，和前面的callq对应。在进入func函数段之后，就是func函数压栈的动作，基本顺序和前面的main函数压栈过程一致。这个地方需要注意的是，首先是mov %edi, -0x4(rbp)，从前面的汇编代码可以看到%edi保存的是n变量的值，其次才执行mov %esi, -0x8(rbp)压栈m变量值，证明函数参数的传递顺序是从右往左。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-内存模型</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>程序内存在地址空间中的分布情况称为<strong>内存模型（Memory Model）</strong>，由操作系统构建，受编译模式影响</p><p>对于32位环境，理论上有4G虚拟地址空间，但要拿出一部分给操作系统内核使用，应用程序无法直接访问这一段内存，这一部分内存地址被称为<strong>内核空间（Kernel Space）</strong></p><p>Windows 在默认情况下会将高地址的 2GB 空间分配给内核（也可以配置为1GB），而 Linux 默认情况下会将高地址的 1GB 空间分配给内核。也就是说，应用程序只能使用剩下的 2GB 或 3GB 的地址空间，称为<strong>用户空间（User Space）</strong>。</p><h1 id="Linux-32位环境下用户空间"><a href="#Linux-32位环境下用户空间" class="headerlink" title="Linux 32位环境下用户空间"></a>Linux 32位环境下用户空间</h1><p><img src="/C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20230411123203442.png"></p><p><img src="/./C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/clip_image001.jpg" alt="img"></p><table><thead><tr><th><strong>内存分区</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>程序代码区  (code)</td><td>存放函数体的二进制代码。一个C语言程序由多个函数构成，C语言程序的执行就是函数之间的相互调用。</td></tr><tr><td>常量区  (constant)</td><td>存放一般的常量、字符串常量等。这块内存只有读取权限，没有写入权限，因此它们的值在程序运行期间不能改变。</td></tr><tr><td>全局数据区  (global  data)</td><td>存放全局变量、静态变量等。这块内存有读写权限，因此它们的值在程序运行期间可以任意改变。</td></tr><tr><td>堆区  (heap)</td><td>一般由程序员分配和释放，若程序员不释放，程序运行结束时由操作系统回收。malloc()、calloc()、free() 等函数操作的就是这块内存，这也是本章要讲解的重点。     注意：这里所说的堆区与数据结构中的堆不是一个概念，堆区的分配方式倒是类似于链表。</td></tr><tr><td>动态链接库</td><td>用于在程序运行期间加载和卸载动态链接库。</td></tr><tr><td>栈区  (stack)</td><td>存放函数的参数值、局部变量的值等，其操作方式类似于数据结构中的栈。</td></tr></tbody></table><p>常量区和全局数据区有时也被合称为静态数据区</p><h1 id="Linux-64位环境下用户空间"><a href="#Linux-64位环境下用户空间" class="headerlink" title="Linux 64位环境下用户空间"></a>Linux 64位环境下用户空间</h1><p>在64位环境下，虚拟地址空间大小为 256TB，Linux 将高 128TB 的空间分配给内核使用，而将低 128TB 的空间分配给用户程序使用。64位环境下虚拟地址只有低48位有效</p><p><img src="/C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20230411123308932.png"></p><h1 id="Windows-32位环境下用户空间"><a href="#Windows-32位环境下用户空间" class="headerlink" title="Windows 32位环境下用户空间"></a>Windows 32位环境下用户空间</h1><ul><li>对于32位程序，内核占用较高的     2GB，剩下的 2GB 分配给用户程序；</li><li>对于64位程序，内核占用最高的     248TB，用户程序占用最低的 8TB。</li></ul><p><img src="/C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/image-20230411123359742.png"></p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-栈</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E6%A0%88/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>栈是一段连续的内存，需要同时记录栈底和栈顶，才能对当前的栈进行定位。在现代计算机中，通常使用ebp寄存器指向栈底，而使用esp寄存器指向栈顶<blockquote><p>ebp: Extend Base Pointer<br>esp: Extend Stack Pointer</p></blockquote></li></ul><p><img src="/C%E8%AF%AD%E8%A8%80-%E6%A0%88/image-20230411122905469.png"></p><ul><li><p>一个程序可以包含多个线程，每个线程都有自己的栈，栈能使用的内存在编译时决定。所以栈内存大小与编译器有关。</p><blockquote><p>在 VC/VS 下，默认是 1M，</p><p>在 C-Free 下，默认是 2M，</p><p>在 Linux GCC 下，默认是 8M</p></blockquote></li><li><p>如果程序使用的栈内存超出最大值，就会发生栈溢出（Stack Overflow）错误。</p></li></ul><p><img src="/C%E8%AF%AD%E8%A8%80-%E6%A0%88/image-20230411123004282.png"></p><h1 id="栈变量大对象传递时的-双向拷贝-现象"><a href="#栈变量大对象传递时的-双向拷贝-现象" class="headerlink" title="栈变量大对象传递时的 双向拷贝 现象"></a>栈变量大对象传递时的 双向拷贝 现象</h1><p>调用函数时会先开辟空间，存放临时对象，然后把此临时空间的地址放入eax供被调用者(函数)返回。返回之后，调用者又会将临时空间的内容拷贝到变量中。故大对象传递时应使用指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">big_thing</span> &#123;</span><br><span class="hljs-type">char</span> buf[<span class="hljs-number">128</span>];<br>&#125;big_thing;<br><br>big_thing <span class="hljs-title function_">return_test</span><span class="hljs-params">()</span> &#123;<br>big_thing b;<br>b.buf[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>big_thing n = return_test();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-内存</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><ul><li><p>全局变量默认初始值为0</p></li><li><p>局部变量未规定默认初始值</p></li><li><p>栈是针对线程来说的，每个线程都拥有一个栈，如果一个程序包含了多个线程，那么它就拥有多个栈</p><blockquote><p>发生函数调用时会将相关数据（包括局部变量、局部数组、形参、寄存器、冗余数据等）压入栈中，函数调用结束会释放这一部分内存</p><p>递归函数内部嵌套了对自身的调用，除非等到最内层的函数调用结束，否则外层的所有函数都不会调用结束，所以很容易出现栈溢出。</p></blockquote></li><li><p>栈 使用的内存大小在编译时决定</p><blockquote><p>在 VC/VS 下，默认是 1M，</p><p>在 C-Free 下，默认是 2M，</p><p>在 Linux GCC 下，默认是 8M</p></blockquote></li></ul><h1 id="虚拟地址范围"><a href="#虚拟地址范围" class="headerlink" title="虚拟地址范围"></a>虚拟地址范围</h1><h2 id="32位编译模式"><a href="#32位编译模式" class="headerlink" title="32位编译模式"></a>32位编译模式</h2><p>一个指针或地址占用4个字节的内存，理论上能够访问的虚拟内存空间大小为 2^32 = 0X100000000 Bytes，即4GB，有效虚拟地址范围是 0 ~ 0XFFFFFFFF。</p><h2 id="64位编译模式"><a href="#64位编译模式" class="headerlink" title="64位编译模式"></a>64位编译模式</h2><p>一个指针或地址占用8个字节的内存，共有64位，理论上能够访问的虚拟内存空间大小为 2^64。</p><p>Windows 和 Linux 都对虚拟地址进行了限制，仅使用虚拟地址的低48位（6个字节），总的虚拟地址空间大小为 2^48 = 256TB。</p><blockquote><p>2^64 是一个很大的值，几乎是无限的，就目前的技术来讲，不但物理内存不可能达到这么大，CPU的寻址能力也没有这么大，实现64位长的虚拟地址只会增加系统的复杂度和地址转换的成本</p></blockquote><h1 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h1><p>将一个数据尽量放在一个步长之内，避免跨步长存储。 </p><p>在32位编译模式下，默认以4字节对齐；在64位编译模式下，默认以8字节对齐。</p><blockquote><p>对于全局变量，GCC在 Debug 和 Release 模式下都会进行内存对齐，而VS只有在 Release 模式下才会进行对齐。</p><p>而对于局部变量，GCC和VS都不会进行对齐，不管是Debug模式还是Release模式。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> pack(1)</span><br><span class="hljs-comment">//范围内代码按1字节方式对齐</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span>  pack()</span><br><span class="hljs-comment">//注意作用域，及时解除</span><br></code></pre></td></tr></table></figure><p><img src="/C%E8%AF%AD%E8%A8%80-%E5%86%85%E5%AD%98/image-20230411122345785.png"></p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-数组</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E7%BB%84/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a>数组名</h1><ul><li><p>求数组长度，只能使用数组名，不能使用数组指针</p><blockquote><p>C语言标准规定，当数组名作为数组定义的标识符（也就是定义或声明数组时）、sizeof 或 &amp; 的操作数时，它才表示整个数组本身，在其他的表达式中，数组名会被转换为指向第 0 个元素的指针（地址）。</p></blockquote><blockquote><p>对数组名进行&amp;操作，并不是取其地址，而是得到了指向整个数组的指针。也就是说，arr与&amp;arr指向的是同一个地址，但是他们的类型不一样。arr相当于&amp;arr[0]，类型是int *，而&amp;arr是指向整个数组的指针，类型是<code>int (*)[5]</code></p></blockquote></li><li><p><strong>数组名不可以自增（可以加减）</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> a[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>a++;  <span class="hljs-comment">//错误,数组名是指针型常量</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><ul><li><p>数组只给部分元素赋值时，剩余元素会自动初始化为0</p><blockquote><p><code>int nums[10] = &#123;0&#125;;</code> 相当于只给第一个元素赋0，剩余元素自动初始化为0了</p><p>对于short、int、long，就是整数     0；</p><p>对于char，就是字符     ‘\0’；</p><p>对于float、double，就是小数     0.0</p></blockquote></li><li><p>如给全部元素赋值，那么在定义数组时可以不给出数组长度<code>int nums[] = &#123;1，2，3&#125;；</code></p></li><li><p>C99标准后可以指定下标进行初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">10</span>]=&#123; [<span class="hljs-number">2</span>]=<span class="hljs-number">12</span> &#125;;<br><span class="hljs-type">int</span> a[]=&#123; [<span class="hljs-number">9</span>]=<span class="hljs-number">11</span> &#125;;  <span class="hljs-comment">//C99中长度可以自动推算</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><ul><li>二维数组的初始化可以按行分段赋值，也可按行连续赋值。</li></ul><p><code>int a[5][3]=&#123;80, 75, 92, 61, 65, 71, 59, 63, 70, 85, 87, 90, 76, 77, 85&#125;;</code></p><ul><li>如果对全部元素赋值，那么第一维的长度可以不给出</li></ul><p><code>int a[][3] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;</code></p><ul><li>一个二维数组也可以分解为多个一维数组</li></ul><p>二维数组<code>a[3][4]</code>可分解为三个一维数组，它们的数组名分别为 a[0]、a[1]、a[2]</p><h1 id="变长数组"><a href="#变长数组" class="headerlink" title="变长数组"></a>变长数组</h1><ul><li>普通数组（固定长度的数组）是在编译期间分配内存的，而变长数组是在运行期间分配内存的。（C99后才能使用变长数组）</li><li>变长数组仍是静态数组（一旦定义长度不能变化）</li></ul><h1 id="数组下标"><a href="#数组下标" class="headerlink" title="数组下标"></a>数组下标</h1><ul><li>对数组的引用 <code>a[i]</code> 在编译时总是被编译器改写成<code>*(a+i)</code>的形式，因此两者是一样的</li><li>取下标操作符[ ]是建立在指针的基础上，它的作用是使一个指针和一个整数相加，产生出一个新的指针，然后从这个新指针（新地址）上取得数据</li></ul><p>​            <code>a[3] 等价于 *(a + 3)，3[a] 等价于 *(3 + a)</code></p><ul><li>使用下标时，编译器会自动把下标的步长调整到数组元素的大小</li></ul>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-指针</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ul><li><p>指针的加减操作会移动一个数据类型的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">y = ++*px; <span class="hljs-comment">//px的内容加上1之后赋给y，++*px相当于++(*px)</span><br>y = *px++; <span class="hljs-comment">//相当于y=*(px++)</span><br></code></pre></td></tr></table></figure></li><li><p>sizeof(数组名)才能获取数组长度，sizeof(数组指针)得到指针本身长度。sizeof返回无符号数，类型size_t</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> *p = a;<br><br><span class="hljs-keyword">sizeof</span>(p)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)   --&gt;  <span class="hljs-number">1</span> <br><span class="hljs-keyword">sizeof</span>(a)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)    --&gt;  <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="数组名作为函数参数时都是指针"><a href="#数组名作为函数参数时都是指针" class="headerlink" title="数组名作为函数参数时都是指针"></a>数组名作为函数参数时都是指针</h1><p>以下三种形式都传递了数组指针，在函数内部无法通过这个指针获得数组长度，都要作为指针变量对待。（数组名退化为一级指针）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> intArr[<span class="hljs-number">6</span>], <span class="hljs-type">int</span> len)</span>&#123;<br>    …<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> intArr[], <span class="hljs-type">int</span> len)</span>&#123;<br>    …<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> *intArr, <span class="hljs-type">int</span> len)</span>&#123;<br>    …<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="空指针应初始化为NULL（注意大小写）"><a href="#空指针应初始化为NULL（注意大小写）" class="headerlink" title="空指针应初始化为NULL（注意大小写）"></a>空指针应初始化为NULL（注意大小写）</h1><p>  <code>char *str = NULL;</code>  </p><p>NULL 是在stdio.h中定义的一个宏 <code>#define NULL ((void *)0)</code>，<code>void *</code>表示指针指向的数据的类型是未知的，一般在后续使用时进行强制类型转换</p><h1 id="用指针作为函数返回值时"><a href="#用指针作为函数返回值时" class="headerlink" title="用指针作为函数返回值时"></a>用指针作为函数返回值时</h1><p>需要注意，函数运行结束后会销毁在它内部定义的所有局部数据，包括局部变量、局部数组和形式参数，函数返回的指针请尽量不要指向这些数据</p><h1 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *lines[<span class="hljs-number">5</span>] = &#123;             <span class="hljs-comment">//lines占用内存 = 4(指针本身长度) *5</span><br><span class="hljs-string">&quot;COSC1283/1284&quot;</span>,<br><span class="hljs-string">&quot;Programming&quot;</span>,<br><span class="hljs-string">&quot;Techniques&quot;</span>,<br><span class="hljs-string">&quot;is&quot;</span>,<br><span class="hljs-string">&quot;great fun&quot;</span><br>&#125;;<br><span class="hljs-type">char</span> *str1 = lines[<span class="hljs-number">1</span>];<br><span class="hljs-type">char</span> *str2 = *(lines + <span class="hljs-number">3</span>);<br><span class="hljs-type">char</span> c1 = *(*(lines + <span class="hljs-number">4</span>) + <span class="hljs-number">6</span>);<br><span class="hljs-type">char</span> c2 = (*lines + <span class="hljs-number">5</span>)[<span class="hljs-number">5</span>];<br><span class="hljs-type">char</span> c3 = *lines[<span class="hljs-number">0</span>] + <span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1 = %s\n&quot;</span>, str1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str2 = %s\n&quot;</span>, str2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; c1 = %c\n&quot;</span>, c1);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; c2 = %c\n&quot;</span>, c2);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; c3 = %c\n&quot;</span>, c3);<br><br></code></pre></td></tr></table></figure><p>输出结果为：</p><p><code>str1 = Programming</code><br><code>str2 = is</code><br><code>c1 = f</code><br><code>c2 = 2</code><br><code>c3 = E</code></p><ul><li><code>lines[1]</code>：它是一个指针，指向字符串string1，即string1 的首地址。</li><li><code>*(lines + 3)</code>：lines + 3 为数组中第 3 个元素的地址，<code>*(lines + 3)</code> 为第 3 个元素的值，它是一个指针，指向字符串 string3。</li><li><code>*(*(lines + 4)+ 6)</code>：<code>*(lines + 4) + 6 == lines[4] + 6 == string4 + 6</code>，表示字符串 string4 中第 6     个字符的地址，即 f 的地址，所以 <em>(</em>(lines + 4) + 6) 就表示字符 f。</li><li><code>(*lines +5)[5]</code>：<code>*lines + 5</code> 为字符串 string0 中第 5 个字符的地址，即 2 的地址，<code>(*lines+5)[5]</code>等价于<code>*(*lines+5+5)</code>，表示第10个字符，即 2。</li><li><code>*lines[0]+2</code>：lines[0] 为字符串 string0 中第 0 个字符的地址，即 C 的地址；<code>*lines[0]</code> 也就表示第 0 个字符，即字符  C。字符与整数运算，首先转换为该字符对应的 ASCII 码，然后再运算，所以 <code>*lines[0] + 2 = 67 + 2 = 69</code>，69     对应的字符为 E。</li></ul><h1 id="二维数组指针"><a href="#二维数组指针" class="headerlink" title="二维数组指针"></a>二维数组指针</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123; &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>&#125; &#125;;<br><span class="hljs-type">int</span> (*p)[<span class="hljs-number">4</span>] = a;  <span class="hljs-comment">//p占用内存 = 4 (指针本身长度)</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(*(p+<span class="hljs-number">1</span>)));<br><br>a+i == p+i<br>a[i] == p[i] == *(a+i) == *(p+i)<br>a[i][j] == p[i][j] == *(a[i]+j) == *(p[i]+j) == *(*(a+i)+j) == *(*(p+i)+j)   可用于遍历数组<br></code></pre></td></tr></table></figure><ul><li><p>括号中的*表明 p 是一个指针，它指向一个数组，数组的类型为int[4]，这正是 a 所包含的每个一维数组的类型。</p></li><li><p>[     ]的优先级高于*，(     )是必须要加的，如果赤裸裸地写作<code>int *p[4]</code>，那么应该理解为<code>int *(p[4])</code>，p 就成了一个指针数组，而不是二维数组指针</p></li><li><p>p指向数组 a 的开头，也即第 0 行；p+1前进一行，指向第 1 行。</p></li><li><p><code>*(p+1)</code>表示取地址上的数据，也就是整个第 1 行数据。注意是一行数据，是多个数据，不是第 1 行中的第 0 个元素</p></li><li><p><code>*(p+1)+1</code>表示第 1 行第 1 个元素的地址。因为<code>*(p+1)</code>单独使用时表示的是第 1 行数据，放在表达式中会被转换为第 1 行数据的首地址，也就是第 1 行第 0 个元素的地址，因为使用整行数据没有实际的含义，编译器遇到这种情况都会转换为指向该行第 0 个元素的指针；就像一维数组的名字，<strong>在定义时或者和 sizeof、&amp; 一起使用时才表示整个数组</strong>，<strong>出现在表达式中就会被转换为指向数组第 0 个元素的指针。</strong></p></li></ul><ol start="4"><li><code>*(*(p+1)+1)</code>表示第 1 行第 1 个元素的值。很明显，增加一个 * 表示取地址上的数据。</li></ol>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-不定长参数宏</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E4%B8%8D%E5%AE%9A%E9%95%BF%E5%8F%82%E6%95%B0%E5%AE%8F/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E4%B8%8D%E5%AE%9A%E9%95%BF%E5%8F%82%E6%95%B0%E5%AE%8F/</url>
    
    <content type="html"><![CDATA[<p>C 语言中 VA_ARGS 是一个可变参数的宏，是新的 C99 规范中新增的，需要配合 define 使用，总体来说就是将左边宏中 … 的内容原样抄写在右边 VA_ARGS 所在的位置。</p><h1 id="一个不定长参数"><a href="#一个不定长参数" class="headerlink" title="一个不定长参数"></a>一个不定长参数</h1><p><code>#define MY_PRINT(...)   hesy_print(__VA_ARGS__)</code></p><h1 id="一个固定参数和一个不定长参数"><a href="#一个固定参数和一个不定长参数" class="headerlink" title="一个固定参数和一个不定长参数"></a>一个固定参数和一个不定长参数</h1><p><code>#define MY_PRINT(fmt, ...)   hesy_print(fmt, ##__VA_ARGS__)</code></p><p>如果可变参数被忽略或为空，## 操作将使预处理器（preprocessor）去除掉它前面的那个逗号</p><p><strong>可用于C语言下设置默认参数</strong></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> print_LOG(level, fmt, ...) printf(<span class="hljs-string">&quot;[%s][%d]&quot;</span>fmt<span class="hljs-string">&quot;\n&quot;</span>, __FUNCTION__, __LINE__, ##__VA_ARGS__)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> print_LOG(level, fmt, args...) SYS_LOG(<span class="hljs-string">&quot;[WIFI]&quot;</span>, level, fmt,  ##args)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-预定义宏</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E9%A2%84%E5%AE%9A%E4%B9%89%E5%AE%8F/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%A2%84%E5%AE%9A%E4%B9%89%E5%AE%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="标准C语言预定义宏"><a href="#标准C语言预定义宏" class="headerlink" title="标准C语言预定义宏"></a>标准C语言预定义宏</h1><p>标准C语言预处理要求定义某些对象宏，每个预定义宏的名称为两个下划线字符开头和结尾，这些预定义宏不能被取消定义（#undef）或由编程人员重新定义。</p><ul><li><strong>LINE</strong> ：当前程序行的行号，表示为十进制整型常量</li><li><strong>FILE</strong> ：当前源文件名，表示字符串型常量</li><li><strong>DATE</strong> ：转换的日历日期，表示为Mmm dd yyyy     形式的字符串常量，Mmm是由asctime产生的。</li><li><strong>TIME</strong>      ：转换的时间，表示”hh:mm:ss”形式的字符串型常量，是有asctime产生的。（asctime貌似是指的一个函数）</li><li><strong>STDC</strong> ：编辑器为ISO兼容实现时位十进制整型常量</li><li><strong>STDC_VERSION</strong>      ：如何实现复合C89整部1，则这个宏的值为19940SL；如果实现符合C99，则这个宏的值为199901L；否则数值是未定义</li><li><strong>STDC_EOBTED</strong>     ：(C99)实现为宿主实现时为1,实现为独立实现为0</li><li><strong>STDC_IEC_559</strong>     ：(C99)浮点数实现复合IBC 60559标准时定义为1，否者数值是未定义</li><li>__STDC_IEC_559_COMPLEX__：     (C99)复数运算实现复合IBC 60559标准时定义为1，否者数值是未定义</li><li><strong>STDC_ISO_10646</strong>     ：(C99)定义为长整型常量，yyyymmL表示wchar_t值复合ISO 10646标准及其指定年月的修订补充，否则数值未定义</li></ul><p>C++中还定义了 __cplusplus</p><p>C语言中的__FILE__、__LINE__和__DATE__等都在头文件#include&lt;stdio.h&gt;中</p><h1 id="打印函数示例"><a href="#打印函数示例" class="headerlink" title="打印函数示例"></a>打印函数示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 指定下一行的__LINE__为200,重点是line的下一行是200 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">line</span> 200</span><br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,__LINE__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,__LINE__);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,__LINE__);<br> <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义的宕机函数中可使用到"><a href="#自定义的宕机函数中可使用到" class="headerlink" title="自定义的宕机函数中可使用到"></a><strong>自定义的宕机函数中可使用到</strong></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> CM_ASSERT(x) (MSCP_ASSERT((int)(x), __FILE__,__func__, __LINE__))</span><br><span class="hljs-comment">/* 平台实现的宕机函数 */</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">MSCP_ASSERT</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *func, <span class="hljs-type">int</span> line)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-预处理</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E9%A2%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>编译器会将预处理的结果保存到和源文件同名的 .i 文件中</p><h1 id="include-文件包含命令"><a href="#include-文件包含命令" class="headerlink" title="#include 文件包含命令"></a>#include 文件包含命令</h1><ul><li><p>使用尖括号&lt;     &gt;，编译器会到系统路径下查找头文件；</p></li><li><p>使用双引号”     “，编译器首先在当前目录下查找头文件，如果没有找到，再到系统路径下查找</p></li></ul><h1 id="define-宏定义"><a href="#define-宏定义" class="headerlink" title="#define 宏定义"></a>#define 宏定义</h1><ul><li><p>宏定义必须写在函数之外，其作用域为宏定义命令起到源程序结束。如要终止其作用域可使用 #undef 命令</p></li><li><p>代码中的宏名如果被引号包围，那么预处理程序不对其作宏代替（所以printf中打印的宏定义字符不会被替换）</p></li><li><p>带参数的宏定义需要格外小心，最好每一部分都用括号包住     #define SQ(y) ((y)*(y))</p></li><li><p>#用来将宏定义中的参数转换为字符，也就是在宏参数的开头和末尾添加引号。如果x是一个宏参量，那么#x可以把参数名转化成相应的字符串。该过程称为字符串化（stringizing）</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#incldue <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PSQR(x) printf(<span class="hljs-string">&quot;the square of&quot;</span> #x <span class="hljs-string">&quot;is %d./n&quot;</span>,(x)*(x))</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> y =<span class="hljs-number">4</span>;<br>    PSQR(y);<br>    PSQR(<span class="hljs-number">2</span>+<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p>the square of y is 16.</p><p>the square of 2+4 is 36.</p><p>第一次调用宏时使用“y”代替#x；第二次调用时用“2+4”代#x。</p></blockquote></li><li><p>##称为连接符，用来将宏参数或其他的串连接起来，把两个语言符号组合成单个语言符号</p><blockquote><p>#define CON1(a, b) a##e##b</p><p>printf(“%f\n”, CON1(8.5, 2));</p><p>会被展开为</p><p>printf(“%f\n”, 8.5e2);</p></blockquote></li></ul><h1 id="预定义宏"><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h1><p>ANSI C 规定了以下几个预定义宏，它们在各个编译器下都可以使用：</p><ul><li><code>__LINE__</code>：表示当前源代码的行号；</li><li><code>__FILE__</code>：表示当前源文件的名称；</li><li><code>__DATE__</code>：表示当前的编译日期；</li><li><code>__TIME__</code>：表示当前的编译时间；</li><li><code>__STDC__</code>：当要求程序严格遵循ANSI     C标准时该标识被赋值为1；</li><li><code>__cplusplus</code>：当编写C++程序时该标识符被定义</li></ul><h1 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h1><ul><li><p>#if 后面跟的是“整型常量表达式”，而 #ifdef 和     #ifndef 后面跟的只能是一个宏名</p></li><li><p>#ifdef 可以认为是 #if defined 的缩写</p></li><li><p>VS/VC 下，当以 Debug 模式编译程序时，宏 _DEBUG 会被定义，可用于条件编译区分release版</p></li></ul><h1 id="error-阻止编译"><a href="#error-阻止编译" class="headerlink" title="#error 阻止编译"></a>#error 阻止编译</h1><ul><li>在编译期间产生错误信息，并阻止程序继续编译</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __cplusplus</span><br><span class="hljs-meta">#<span class="hljs-keyword">error</span> 当前程序必须以C++方式编译</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QT-自定义信号槽与connect函数</title>
    <link href="/QT-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%A1%E5%8F%B7%E6%A7%BD%E4%B8%8Econnect%E5%87%BD%E6%95%B0/"/>
    <url>/QT-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%A1%E5%8F%B7%E6%A7%BD%E4%B8%8Econnect%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义信号函数"><a href="#自定义信号函数" class="headerlink" title="自定义信号函数"></a>自定义信号函数</h1><p><strong>信号函数需要符合以下条件：</strong></p><ul><li>定义在某个类中，该类直接或间接继承自 QObject 类</li><li>用 signals 关键字修饰</li><li>函数只需要声明，不需要定义（实现）</li><li>函数的返回值类型为 void，参数的类型和个数不限</li></ul><p>对于 Qt 提供的信号函数，其底层已经设置好了信号发出的时机，例如按下鼠标时、点击 Enter 回车键时等等。</p><p>对于自定义的信号，需要自行指定信号发出的时机，这就需要用到 <strong>emit</strong> 关键字。emit 是 Qt 在 C++ 基础上扩展的一个关键字，专门用来发射信号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWidget</span>:<span class="hljs-keyword">public</span> QWidget&#123;<br><span class="hljs-comment">//Q_OBJECT 是一个宏，添加它才能正常使用 Qt 的信号和槽机制</span><br>Q_OBJECT<br><span class="hljs-comment">//自定义信号函数</span><br>signals:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MySignal</span><span class="hljs-params">(QString mess)</span></span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">emitSignal</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-function">emit <span class="hljs-title">MySignal</span><span class="hljs-params">(message)</span></span>;<span class="hljs-comment">//当程序中执行 emitSingal() 函数时，就会发出 MySignal 信号，message 属性的值也会随信号一同发出，对应的槽函数可以接收到 message 的值。</span><br>&#125;<br><span class="hljs-keyword">private</span>:<br>QString message;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="自定义槽函数"><a href="#自定义槽函数" class="headerlink" title="自定义槽函数"></a>自定义槽函数</h1><p><strong>槽函数需要符合以下条件：</strong></p><ul><li><p>槽函数既可以是普通的全局函数、也可以是类的成员函数、静态成员函数、友元函数、虚函数，还可以用 lambda 表达式表示</p><blockquote><p><em><strong>Qt4 中的槽函数只能是 slots 修饰的类成员函数，Qt5 中取消了这一限制</strong></em></p></blockquote></li><li><p>槽函数的返回值必须和信号函数相同，由于信号函数的返回值一定是 void，所以槽函数的返回值也必须为 void</p></li><li><p>对于带参的信号函数，槽函数可以选择接收所有参数，但参数的类型、顺序、个数都必须与信号函数相同；也可以选择接收前几个参数，这些参数的类型、顺序都必须与信号函数相同；还可以选择不接受任何参数</p></li><li><p>槽函数的参数不能有默认值</p></li></ul><p>下面的例子展示了响应 MySignal 信号的自定义槽函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWidget</span>:<span class="hljs-keyword">public</span> QWidget&#123;<br>    <span class="hljs-comment">//Q_OBJECT 是一个宏，添加它才能正常使用 Qt 的信号和槽机制</span><br>    Q_OBJECT<br>    signals:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MySignal</span><span class="hljs-params">(QString mess1,QString mess2)</span></span>;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">emitSignal</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-function">emit <span class="hljs-title">MySignal</span><span class="hljs-params">(message1,message2)</span></span>;<br>        &#125;<br><br>    <span class="hljs-comment">//类的成员函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">recSlot1</span><span class="hljs-params">(QString mess)</span></span>&#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;执行 recSlot1() 成员函数，输出&quot;</span> &lt;&lt; mess;<br>    &#125;<br><br>    <span class="hljs-comment">//指明定义的是槽函数</span><br>    <span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">recSlot2</span><span class="hljs-params">(QString mess1,QString mess2)</span></span>&#123;<br>        <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;执行 recSlot2() 槽函数，输出&quot;</span>&lt;&lt; mess1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; mess2;<br>    &#125;<br>    <span class="hljs-keyword">public</span>:<br>        QString message1;<br>        QString message2;<br>&#125;;<br><br><span class="hljs-comment">//全局函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">recSlot3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">qDebug</span>() &lt;&lt; <span class="hljs-string">&quot;执行 recSlot3() 全局函数&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>程序中，重点关注 recSlot1()、recSlot2()、recSlot3() 这 3 个函数：</p><ul><li><p>recSlot1() 是 MyWidget 类内部的 public 成员函数，可以当做槽函数使用；</p><p><code>QObject::connect(&amp;mywidget,&amp;MyWidget::MySignal,&amp;mywidget,&amp;MyWidget::recSlot1);</code></p></li><li><p>recSlot2() 位于 MyWidget 类的内部，修饰它的关键字是 public slots。slots 和 emit 一样，是 Qt 扩展的一个关键字，专门用来修饰槽函数。也就是说，recSlot2() 是 MyWidget 类中的槽函数。</p><p><code>QObject::connect(&amp;mywidget,&amp;MyWidget::MySignal,&amp;mywidget,&amp;MyWidget::recSlot2);</code></p></li><li><p>recSlot3() 是全局函数，可以当做槽函数使用</p><p><code>QObject::connect(&amp;mywidget,&amp;MyWidget::MySignal,&amp;recSlot3);</code></p></li></ul></blockquote><h1 id="connect函数"><a href="#connect函数" class="headerlink" title="connect函数"></a>connect函数</h1><h2 id="用法一：使用SIGNAL和SLOT宏"><a href="#用法一：使用SIGNAL和SLOT宏" class="headerlink" title="用法一：使用SIGNAL和SLOT宏"></a>用法一：使用SIGNAL和SLOT宏</h2><p>connect函数用来连接信号和槽函数，<strong>在 Qt5 版本之前</strong>，其最常用的语法格式是：</p><p>​    <code>QObject::connect(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type = Qt::AutoConnection)</code></p><p>各个参数的含义分别是：</p><ul><li>sender：指定信号的发送者；</li><li>signal：指定信号函数，信号函数必须用 SIGNAL() 宏括起来；</li><li>reveiver：指定信号的接收者；</li><li>method：指定接收信号的槽函数，槽函数必须用 SLOT() 宏括起来；</li><li>type: 用于指定关联方式，默认的关联方式为 Qt::AutoConnection，通常不需要手动设定。</li></ul><h2 id="用法二：使用-amp-类名-函数名"><a href="#用法二：使用-amp-类名-函数名" class="headerlink" title="用法二：使用&amp;类名::函数名"></a>用法二：使用&amp;类名::函数名</h2><p><strong>Qt5 版本中</strong>，不再使用 SIGNAL() 和 SLOT() 宏，实现代码为：</p><p>​    <code>connect(&amp;But, &amp;QPushButton::clicked, &amp;widget, &amp;QWidget::close);</code></p><p>可以看到，新版 connect() 函数指定信号函数和槽函数的语法格式是  <code>&amp;+函数所在类+函数名</code></p><h2 id="用法三：Lambda表达式"><a href="#用法三：Lambda表达式" class="headerlink" title="用法三：Lambda表达式"></a>用法三：Lambda表达式</h2><p>在Pro项目文件中加入 CONFIG += C++ 11后，可以在connect函数中使用Lambda表达式，直接编写信号发射后要执行的代码，不需要定义槽函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">connect</span>(ui-&gt;pushButton,&amp;QPushButton::clicked,[=](<span class="hljs-type">void</span>)&#123;<br>        ui-&gt;label-&gt;<span class="hljs-built_in">setText</span>(<span class="hljs-string">&quot;Hello Qt&quot;</span>);<br>    &#125;);<br></code></pre></td></tr></table></figure><blockquote><p>connect在只有三个参数的情况下，默认第三个槽函数的对象是本类this，也就是第三个参数this被省略了。</p></blockquote><h2 id="用法四：省略connect函数，自动连接信号和槽"><a href="#用法四：省略connect函数，自动连接信号和槽" class="headerlink" title="用法四：省略connect函数，自动连接信号和槽"></a>用法四：省略connect函数，自动连接信号和槽</h2><p>Qt信号和槽函数的命名是有规则的，组成为 <code>on_对象名_信号</code>，就可以省略connect而直接实现信号和槽的连接。以按钮为例：</p><p>​    <code>void on_pushButton_clicked();</code></p><br><br><p>此外，一个 connect() 函数只能关联一个信号函数和一个槽函数，但程序中可以包含多个 connect() 函数，用于实现以下几种<strong>效果</strong>：</p><ul><li>关联多个信号函数和多个槽函数；</li><li>一个信号函数可以关联多个槽函数，当信号发出时，与之关联的槽函数会一个接一个地执行，但它们执行的<strong>顺序是随机的</strong>，无法人为指定哪个先执行、哪个后执行；</li><li>多个信号函数可以关联同一个槽函数，无论哪个信号发出，槽函数都会执行。</li></ul>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QT基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言-可变参数函数</title>
    <link href="/C%E8%AF%AD%E8%A8%80-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0/"/>
    <url>/C%E8%AF%AD%E8%A8%80-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>C语言允许定义参数数量可变的函数，称为<strong>可变参数函数</strong>，这种函数需要固定数量的<strong>强制参数</strong>和数量可变的<strong>可选参数</strong>，可选参数用…占位符表示。最经典的就是printf函数，其原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format,...)</span>;<br></code></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>需包含头文件 <strong>stdarg.h</strong></li><li> 定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。</li><li> 在函数定义中创建一个 <strong>va_list</strong> 类型变量，用于获取可选参数，也被称为参数指针。</li><li> 使用 <strong>va_start</strong> 宏 和 可变参数前的最后一个固定参数 来初始化 <strong>va_list</strong> 变量为一个参数列表。</li><li> 使用 <strong>va_arg</strong> 宏和 <strong>va_list</strong> 变量来访问参数列表中的每个项。</li><li> 使用宏 <strong>va_end</strong> 来清除赋予 <strong>va_list</strong> 变量的内存。</li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>定义的函数<strong>必须至少有一个固定参数</strong>；这么做的目的很明显，就是要定位变参的首地址，也就是固定参数地址+sizeof（固定参数类型）；</li><li>固定参数和可变参数之间可以没有任何关系；虽然经典的printf函数中，第一个固定参数里（格式化字符串）包含了后续变参的类型，但是这仅仅是函数功能的需要，语法上没有任何要求，下面的例子可以证明这一点；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 函数add() 计算可选参数之和</span><br><span class="hljs-comment">// 参数：第一个强制参数指定了可选参数的数量，可选参数为double类型</span><br><span class="hljs-comment">// 返回值：和值，double类型</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> n, ...)</span><br>&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> sum = <span class="hljs-number">0.0</span>;<br>        va_list argptr;<br>        va_start(argptr, n);             <span class="hljs-comment">// 初始化argptr</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; ++i)       <span class="hljs-comment">// 对每个可选参数，读取类型为double的参数，</span><br>                sum += va_arg(argptr, <span class="hljs-type">double</span>); <span class="hljs-comment">// 然后累加到sum中</span><br>        va_end(argptr);<br>        <span class="hljs-keyword">return</span> sum;<br>&#125;<br> <br><span class="hljs-comment">//double s = add(5, 1.0, 2.0, 3.0, 4.0, 5.0);</span><br></code></pre></td></tr></table></figure><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>可变参数的实现原理利用了<strong>内存的压栈技术</strong>，调用函数后函数参数会被压入（push）栈内，使用时，再逐个从栈里pop出来。按照默认的调用惯例，函数参数压栈的顺序是从<strong>最右边参数</strong>开始的，再向左逐个压入，根据栈的原理，在取完强制参数后，就从第一个可选参数开始取了。 </p><p>在VS2017-X86平台下的源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span>* va_list;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _ADDRESSOF(v) (&amp;(v))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _INTSIZEOF(n)          ((sizeof(n) + sizeof(int) - 1) &amp; ~(sizeof(int) - 1))</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __crt_va_start_a(ap, v) ((void)(ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __crt_va_arg(ap, t)     (*(t*)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __crt_va_end(ap)        ((void)(ap = (va_list)0))</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_start __crt_va_start</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_arg   __crt_va_arg</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_end   __crt_va_end</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_copy(destination, source) ((destination) = (source))</span><br></code></pre></td></tr></table></figure><br><br><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/ericbar/article/details/79558827">https://blog.csdn.net/ericbar/article/details/79558827</a></p><p><a href="https://blog.csdn.net/qq_41854911/article/details/121190006">https://blog.csdn.net/qq_41854911/article/details/121190006</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS2019配置与调试技巧</title>
    <link href="/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <url>/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h1><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>​    用惯了VSCode的One Dark Pro主题，VS2019也可以直接在扩展里下载安装One Dark Pro主题插件，一键配置，懒人必备。效果如下图，关键字、字符串、类名都是不同颜色。</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/1.png"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="Doxygen-Comments"><a href="#Doxygen-Comments" class="headerlink" title="Doxygen Comments"></a>Doxygen Comments</h4><p>快速生成注释，常用的手法就是敲个/* 自动能补全后半个*/ ，以及在函数名上一行输入/** 再回车，可以自动生成函数注释</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/1.gif"></p><h4 id="Highlight-all-occurrences-of-selected-word"><a href="#Highlight-all-occurrences-of-selected-word" class="headerlink" title="Highlight all occurrences of selected word++"></a>Highlight all occurrences of selected word++</h4><p>老瞎眼必备，高亮选中关键词的所有引用</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/2.gif"></p><h4 id="Visual-Assist"><a href="#Visual-Assist" class="headerlink" title="Visual Assist"></a><del>Visual Assist</del></h4><p>番茄助手，远古时代的编码神器，用VS2010时非常有用，可以智能提示、关键词高亮、自动标错，功能很强大。不过到VS2019已经很智能了，基本就不再需要额外插件。更关键的是这个东西它有版权限制，我们公司之前还被发律师函了呃…</p><h3 id="引入外部库"><a href="#引入外部库" class="headerlink" title="引入外部库"></a>引入外部库</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>指定头文件路径</li></ol><p>​        项目右键 -&gt; 属性 -&gt; C/C++ -&gt; 常规 -&gt; 附加包含目录</p><ol start="2"><li>指定库文件位置</li></ol><p>​        项目右键 -&gt; 属性 -&gt; 链接器 -&gt; 常规 -&gt; 附加库目录</p><ol start="3"><li>指定使用哪个库（具体名称，如avutil.lib）</li></ol><p>​        项目右键 -&gt; 属性 -&gt; 链接器 -&gt; 输入 -&gt; 附加依赖项</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li><p>特别注意 设置项目属性时和构建项目时的配置与平台 是否一致</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230215101203798.png"></p></li><li><p>项目属性里的设置无误，已经指定了头文件路径，但是VS一直报错无法打开源文件 libavutil/log.h</p><p>尝试删掉这一句，重新输一遍即可，在输入 / 之后会有智能路径提示，说明VS已经认识了这个路径</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230215101317327.png"></p></li></ul><h1 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h1><p>就说一下本菜鸡平常经常用到的。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>F9 -&gt; 插入断点</li><li>F5 -&gt; 运行程序</li><li>F10 -&gt; 逐过程调试（不会进入函数内部）</li><li>F11 -&gt; 逐语句调试</li><li>Shift + F11 -&gt; 跳出函数</li><li>向前/后导航 -&gt; <strong>鼠标侧边键</strong>（效率立升百分百）</li><li>ctrl + k , ctrl + f -&gt; 格式化代码</li></ul><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><ul><li>调用堆栈可以看到当前函数的调用关系</li><li>断点窗口可以看到当前设置的所有断点</li><li>自动窗口会显示当前代码行和上一代码行中所使用到的变量</li><li>局部变量窗口会显示当前函数中的所有局部变量</li></ul><h3 id="正则搜索"><a href="#正则搜索" class="headerlink" title="正则搜索"></a>正则搜索</h3><p>​    忽略索引，搜索数组名。例如想要搜索Sec_ARRAY[wTsrCycle].wSecID，但需去掉索引wTsrCycle这几个字符，则格式如： Sec_ARRAY[(.*)].wSecID</p><h3 id="本地调试器"><a href="#本地调试器" class="headerlink" title="本地调试器"></a>本地调试器</h3><p>​    如果想单独调试一个函数或直接跳到某一步，在程序运行后，先打上断点，然后右键代码行-&gt; 设置下一条语句，或者直接拖动左侧的黄色小箭头</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/3.gif"></p><h3 id="设置main函数的输入参数"><a href="#设置main函数的输入参数" class="headerlink" title="设置main函数的输入参数"></a>设置main函数的输入参数</h3><p>​    有时候主函数形式为 int main(int argc, char *argv[])，需要获取输入参数，但是在VS中直接运行程序是无法输入参数的，需要在项目属性页配置命令参数</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230214104151921.png"></p><h3 id="Debug和Release模式宏定义"><a href="#Debug和Release模式宏定义" class="headerlink" title="Debug和Release模式宏定义"></a>Debug和Release模式宏定义</h3><p>​    Debug模式下默认会定义宏  _DEBUG ，Release模式下默认会定义宏 NDEBUG，可以利用宏来控制某些调试代码只在Debug模式下构建的调试版程序中生效。 </p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/16764613714585.png"></p><h3 id="路径宏"><a href="#路径宏" class="headerlink" title="路径宏"></a>路径宏</h3><p>​    记录一些项目配置时路径宏的定义</p><table><thead><tr><th>ConfigurationName</th><th>配置名字，通常是Debug或者Release</th></tr></thead><tbody><tr><td>IntDir</td><td>编译器使用的中间目录，产出obj文件</td></tr><tr><td>OutDir</td><td>链接器使用的输出目录</td></tr><tr><td>ProjectDir</td><td>项目目录</td></tr><tr><td>ProjectName</td><td>项目名字</td></tr><tr><td>SolutionDir</td><td>解决方案目录</td></tr><tr><td>TargetDir</td><td>目标输出文件所在的目录</td></tr><tr><td>TargetExt</td><td>目标输出的扩展名</td></tr><tr><td>TargetFileName</td><td>目标输出文件名，包括扩展名</td></tr><tr><td>TargetName</td><td>目标输出名，不包括扩展名</td></tr><tr><td>TargetPath</td><td>目标输出文件的全路径名</td></tr></tbody></table><p>下图是更全的示例：</p><div align=center>     <img src="image-20230214104817682.png" style="zoom:80%;"></img> </div>]]></content>
    
    
    <categories>
      
      <category>配置&amp;安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV多版本切换</title>
    <link href="/OpenCV%E5%A4%9A%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/"/>
    <url>/OpenCV%E5%A4%9A%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">[compiler] sudo apt-get install build-essential<br>[required] sudo apt-get install cmake git libgtk2<span class="hljs-number">.0</span>-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev<br></code></pre></td></tr></table></figure><h4 id="编译安装另一个版本的opencv"><a href="#编译安装另一个版本的opencv" class="headerlink" title="编译安装另一个版本的opencv"></a>编译安装另一个版本的opencv</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">$ cd opencv<span class="hljs-number">-3.4</span><span class="hljs-number">.1</span><br>$ mkdir build<br>$ cd build<br>$ mkdir installed<br>$ cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/home/xlg/opencv<span class="hljs-number">-3.4</span><span class="hljs-number">.10</span>/build/installed -DWITH_CUDA=OFF -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF ..<br>$ make -j4<br>$ sudo make install<br></code></pre></td></tr></table></figure><ol><li><p>其中<code>~/opencv-3.4.1/build/installed</code>为安装OpenCV3.4.1的路径，这个十分关键。</p></li><li><p>设置OFF的理由如下，可大大加快编译速度，当然还要根据需求进行设置。 </p></li></ol><h4 id="使用多版本opencv"><a href="#使用多版本opencv" class="headerlink" title="使用多版本opencv"></a>使用多版本opencv</h4><p> 在写CmakeList.txt，如果只有一个版本的opencv,我们一般直接使用 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">FIND_PACKAGE</span>(OpenCV REQUIRED)<br></code></pre></td></tr></table></figure><p> 现在如果是使用默认安装的opencv4.2,则使用使用上面的指令就足够了。如果使用安装我们自己指定路径的opencv3.4，则使用如下指令 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">set</span>(CMAKE_PREFIX_PATH <span class="hljs-string">&quot;/home/knight/opencv-3.4.10/build/installed/&quot;</span>)<br><span class="hljs-built_in">find_package</span>(OpenCV <span class="hljs-number">3</span> REQUIRED)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>配置&amp;安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
