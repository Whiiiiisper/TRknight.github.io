<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言-可变参数函数</title>
    <link href="/2023/02/21/C%E8%AF%AD%E8%A8%80-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0/"/>
    <url>/2023/02/21/C%E8%AF%AD%E8%A8%80-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>C语言允许定义参数数量可变的函数，称为<strong>可变参数函数</strong>，这种函数需要固定数量的<strong>强制参数</strong>和数量可变的<strong>可选参数</strong>，可选参数用…占位符表示。最经典的就是printf函数，其原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">printf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format,...)</span>;<br></code></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li>需包含头文件 <strong>stdarg.h</strong></li><li> 定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。</li><li> 在函数定义中创建一个 <strong>va_list</strong> 类型变量，用于获取可选参数，也被称为参数指针。</li><li> 使用 <strong>va_start</strong> 宏 和 可变参数前的最后一个固定参数 来初始化 <strong>va_list</strong> 变量为一个参数列表。</li><li> 使用 <strong>va_arg</strong> 宏和 <strong>va_list</strong> 变量来访问参数列表中的每个项。</li><li> 使用宏 <strong>va_end</strong> 来清除赋予 <strong>va_list</strong> 变量的内存。</li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>定义的函数<strong>必须至少有一个固定参数</strong>；这么做的目的很明显，就是要定位变参的首地址，也就是固定参数地址+sizeof（固定参数类型）；</li><li>固定参数和可变参数之间可以没有任何关系；虽然经典的printf函数中，第一个固定参数里（格式化字符串）包含了后续变参的类型，但是这仅仅是函数功能的需要，语法上没有任何要求，下面的例子可以证明这一点；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 函数add() 计算可选参数之和</span><br><span class="hljs-comment">// 参数：第一个强制参数指定了可选参数的数量，可选参数为double类型</span><br><span class="hljs-comment">// 返回值：和值，double类型</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> n, ...)</span><br>&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> sum = <span class="hljs-number">0.0</span>;<br>        va_list argptr;<br>        va_start(argptr, n);             <span class="hljs-comment">// 初始化argptr</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; ++i)       <span class="hljs-comment">// 对每个可选参数，读取类型为double的参数，</span><br>                sum += va_arg(argptr, <span class="hljs-type">double</span>); <span class="hljs-comment">// 然后累加到sum中</span><br>        va_end(argptr);<br>        <span class="hljs-keyword">return</span> sum;<br>&#125;<br> <br><span class="hljs-comment">//double s = add(5, 1.0, 2.0, 3.0, 4.0, 5.0);</span><br></code></pre></td></tr></table></figure><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>可变参数的实现原理利用了<strong>内存的压栈技术</strong>，调用函数后函数参数会被压入（push）栈内，使用时，再逐个从栈里pop出来。按照默认的调用惯例，函数参数压栈的顺序是从<strong>最右边参数</strong>开始的，再向左逐个压入，根据栈的原理，在取完强制参数后，就从第一个可选参数开始取了。 </p><p>在VS2017-X86平台下的源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span>* va_list;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _ADDRESSOF(v) (&amp;(v))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _INTSIZEOF(n)          ((sizeof(n) + sizeof(int) - 1) &amp; ~(sizeof(int) - 1))</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __crt_va_start_a(ap, v) ((void)(ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __crt_va_arg(ap, t)     (*(t*)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __crt_va_end(ap)        ((void)(ap = (va_list)0))</span><br> <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_start __crt_va_start</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_arg   __crt_va_arg</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_end   __crt_va_end</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> va_copy(destination, source) ((destination) = (source))</span><br></code></pre></td></tr></table></figure><blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/ericbar/article/details/79558827">https://blog.csdn.net/ericbar/article/details/79558827</a></p><p><a href="https://blog.csdn.net/qq_41854911/article/details/121190006">https://blog.csdn.net/qq_41854911/article/details/121190006</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS2019配置与调试技巧</title>
    <link href="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h1><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>​    用惯了VSCode的One Dark Pro主题，VS2019也可以直接在扩展里下载安装One Dark Pro主题插件，一键配置，懒人必备。效果如下图，关键字、字符串、类名都是不同颜色。</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/1.png"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="Doxygen-Comments"><a href="#Doxygen-Comments" class="headerlink" title="Doxygen Comments"></a>Doxygen Comments</h4><p>快速生成注释，常用的手法就是敲个/* 自动能补全后半个*/ ，以及在函数名上一行输入/** 再回车，可以自动生成函数注释</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/1.gif"></p><h4 id="Highlight-all-occurrences-of-selected-word"><a href="#Highlight-all-occurrences-of-selected-word" class="headerlink" title="Highlight all occurrences of selected word++"></a>Highlight all occurrences of selected word++</h4><p>老瞎眼必备，高亮选中关键词的所有引用</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/2.gif"></p><h4 id="Visual-Assist"><a href="#Visual-Assist" class="headerlink" title="Visual Assist"></a><del>Visual Assist</del></h4><p>番茄助手，远古时代的编码神器，用VS2010时非常有用，可以智能提示、关键词高亮、自动标错，功能很强大。不过到VS2019已经很智能了，基本就不再需要额外插件。更关键的是这个东西它有版权限制，我们公司之前还被发律师函了呃…</p><h3 id="引入外部库"><a href="#引入外部库" class="headerlink" title="引入外部库"></a>引入外部库</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>指定头文件路径</li></ol><p>​        项目右键 -&gt; 属性 -&gt; C/C++ -&gt; 常规 -&gt; 附加包含目录</p><ol start="2"><li>指定库文件位置</li></ol><p>​        项目右键 -&gt; 属性 -&gt; 链接器 -&gt; 常规 -&gt; 附加库目录</p><ol start="3"><li>指定使用哪个库（具体名称，如avutil.lib）</li></ol><p>​        项目右键 -&gt; 属性 -&gt; 链接器 -&gt; 输入 -&gt; 附加依赖项</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li><p>特别注意 设置项目属性时和构建项目时的配置与平台 是否一致</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230215101203798.png"></p></li><li><p>项目属性里的设置无误，已经指定了头文件路径，但是VS一直报错无法打开源文件 libavutil/log.h</p><p>尝试删掉这一句，重新输一遍即可，在输入 / 之后会有智能路径提示，说明VS已经认识了这个路径</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230215101317327.png"></p></li></ul><h1 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h1><p>就说一下本菜鸡平常经常用到的。</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>F9 -&gt; 插入断点</li><li>F5 -&gt; 运行程序</li><li>F10 -&gt; 逐过程调试（不会进入函数内部）</li><li>F11 -&gt; 逐语句调试</li><li>Shift + F11 -&gt; 跳出函数</li><li>向前/后导航 -&gt; <strong>鼠标侧边键</strong>（效率立升百分百）</li><li>ctrl + k , ctrl + f -&gt; 格式化代码</li></ul><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><ul><li>调用堆栈可以看到当前函数的调用关系</li><li>断点窗口可以看到当前设置的所有断点</li><li>自动窗口会显示当前代码行和上一代码行中所使用到的变量</li><li>局部变量窗口会显示当前函数中的所有局部变量</li></ul><h3 id="正则搜索"><a href="#正则搜索" class="headerlink" title="正则搜索"></a>正则搜索</h3><p>​    忽略索引，搜索数组名。例如想要搜索Sec_ARRAY[wTsrCycle].wSecID，但需去掉索引wTsrCycle这几个字符，则格式如： Sec_ARRAY[(.*)].wSecID</p><h3 id="本地调试器"><a href="#本地调试器" class="headerlink" title="本地调试器"></a>本地调试器</h3><p>​    如果想单独调试一个函数或直接跳到某一步，在程序运行后，先打上断点，然后右键代码行-&gt; 设置下一条语句，或者直接拖动左侧的黄色小箭头</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/3.gif"></p><h3 id="设置main函数的输入参数"><a href="#设置main函数的输入参数" class="headerlink" title="设置main函数的输入参数"></a>设置main函数的输入参数</h3><p>​    有时候主函数形式为 int main(int argc, char *argv[])，需要获取输入参数，但是在VS中直接运行程序是无法输入参数的，需要在项目属性页配置命令参数</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230214104151921.png"></p><h3 id="Debug和Release模式宏定义"><a href="#Debug和Release模式宏定义" class="headerlink" title="Debug和Release模式宏定义"></a>Debug和Release模式宏定义</h3><p>​    Debug模式下默认会定义宏  _DEBUG ，Release模式下默认会定义宏 NDEBUG，可以利用宏来控制某些调试代码只在Debug模式下构建的调试版程序中生效。 </p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/16764613714585.png"></p><h3 id="路径宏"><a href="#路径宏" class="headerlink" title="路径宏"></a>路径宏</h3><p>​    记录一些项目配置时路径宏的定义</p><table><thead><tr><th>ConfigurationName</th><th>配置名字，通常是Debug或者Release</th></tr></thead><tbody><tr><td>IntDir</td><td>编译器使用的中间目录，产出obj文件</td></tr><tr><td>OutDir</td><td>链接器使用的输出目录</td></tr><tr><td>ProjectDir</td><td>项目目录</td></tr><tr><td>ProjectName</td><td>项目名字</td></tr><tr><td>SolutionDir</td><td>解决方案目录</td></tr><tr><td>TargetDir</td><td>目标输出文件所在的目录</td></tr><tr><td>TargetExt</td><td>目标输出的扩展名</td></tr><tr><td>TargetFileName</td><td>目标输出文件名，包括扩展名</td></tr><tr><td>TargetName</td><td>目标输出名，不包括扩展名</td></tr><tr><td>TargetPath</td><td>目标输出文件的全路径名</td></tr></tbody></table><p>下图是更全的示例：</p><p><img src="/2023/02/14/VS2019%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/image-20230214104817682.png"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV多版本切换</title>
    <link href="/2023/02/08/OpenCV%E5%A4%9A%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/"/>
    <url>/2023/02/08/OpenCV%E5%A4%9A%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">[compiler] sudo apt-get install build-essential<br>[required] sudo apt-get install cmake git libgtk2<span class="hljs-number">.0</span>-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev<br></code></pre></td></tr></table></figure><h4 id="编译安装另一个版本的opencv"><a href="#编译安装另一个版本的opencv" class="headerlink" title="编译安装另一个版本的opencv"></a>编译安装另一个版本的opencv</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">$ cd opencv<span class="hljs-number">-3.4</span><span class="hljs-number">.1</span><br>$ mkdir build<br>$ cd build<br>$ mkdir installed<br>$ cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=/home/xlg/opencv<span class="hljs-number">-3.4</span><span class="hljs-number">.10</span>/build/installed -DWITH_CUDA=OFF -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF ..<br>$ make -j4<br>$ sudo make install<br></code></pre></td></tr></table></figure><ol><li><p>其中<code>~/opencv-3.4.1/build/installed</code>为安装OpenCV3.4.1的路径，这个十分关键。</p></li><li><p>设置OFF的理由如下，可大大加快编译速度，当然还要根据需求进行设置。 </p></li></ol><h4 id="使用多版本opencv"><a href="#使用多版本opencv" class="headerlink" title="使用多版本opencv"></a>使用多版本opencv</h4><p> 在写CmakeList.txt，如果只有一个版本的opencv,我们一般直接使用 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">FIND_PACKAGE</span>(OpenCV REQUIRED)<br></code></pre></td></tr></table></figure><p> 现在如果是使用默认安装的opencv4.2,则使用使用上面的指令就足够了。如果使用安装我们自己指定路径的opencv3.4，则使用如下指令 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">set</span>(CMAKE_PREFIX_PATH <span class="hljs-string">&quot;/home/knight/opencv-3.4.10/build/installed/&quot;</span>)<br><span class="hljs-built_in">find_package</span>(OpenCV <span class="hljs-number">3</span> REQUIRED)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
